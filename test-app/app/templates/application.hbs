{{page-title 'TestApp'}}

<h2 id='title'>Welcome to Ember</h2>

<p>Axes</p>
{{#let (scale-pow range='15..785' domain='0..10' exponent='2') as |scale|}}
  <svg class='no-overflow' width='800' height='30'>
    <Lineal::Axis @scale={{scale}} @orientation='bottom' />
  </svg>
  <svg class='no-overflow' width='800' height='30'>
    <Lineal::Axis @scale={{scale}} @orientation='top' />
  </svg>
  <svg class='no-overflow' width='100' height='300'>
    <Lineal::Axis @scale={{scale}} @orientation='left' />
  </svg>
  <svg class='no-overflow' width='100' height='300'>
    <Lineal::Axis @scale={{scale}} @orientation='right' />
  </svg>
{{/let}}

<p>Scale Linear</p>
<svg width='800' height='6'>
  {{#let (scale-linear range='15..785' domain='0..10') as |scale|}}
    {{#each (array 0 1 2 3 4 5 6 7 8 9 10) as |v|}}
      <circle cx={{scale-fn-compute scale v}} cy='3' r='3'></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Scale Pow (^2)</p>
<svg class='scale-pow' width='800' height='6'>
  {{#let (scale-pow range='15..785' domain='0..10' exponent=2) as |scale|}}
    {{#each (array 0 1 2 3 4 5 6 7 8 9 10) as |v|}}
      <circle cx={{scale.compute v}} cy='3' r='3'></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Scale Log</p>
<svg class='scale-log' width='800' height='6'>
  {{#let (scale-log range='15..785' domain='1..10') as |scale|}}
    {{#each (array 1 2 3 4 5 6 7 8 9 10) as |v|}}
      <circle cx={{scale.compute v}} cy='3' r='3'></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Scale Sqrt</p>
<svg class='scale-sqrt' width='800' height='6'>
  {{#let (scale-sqrt range='15..785' domain='0..10') as |scale|}}
    {{#each (array 0 1 2 3 4 5 6 7 8 9 10) as |v|}}
      <circle cx={{scale.compute v}} cy='3' r='3'></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Scale Symlog</p>
<svg class='scale-symlog' width='800' height='6'>
  {{#let (scale-symlog range='15..785' domain='0..10') as |scale|}}
    {{#each (array 0 1 2 3 4 5 6 7 8 9 10) as |v|}}
      <circle cx={{scale.compute v}} cy='3' r='3'></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Scale Ordinal</p>
<svg class='scale-symlog' width='800' height='10'>
  {{#let
    (scale-ordinal range=(css-range 'reds') domain=(array 'A' 'B' 'C'))
    (scale-linear range='15..785' domain='0..9')
    as |colorScale xScale|
  }}
    {{#each (array 'A' 'A' 'B' 'C' 'B' 'B' 'A' 'B' 'C' 'A') as |v idx|}}
      <circle
        class={{colorScale.compute v}}
        cx={{xScale.compute idx}}
        cy='5'
        r='5'
      ></circle>
    {{/each}}
  {{/let}}
</svg>

<p>Line</p>
<div class='fluid-chart'>
  <Lineal::Fluid class='fluid-chart__plot' as |width height|>
    <svg class='fluid-chart__svg'>
      {{#let
        (scale-linear range=(array 0 width))
        (scale-linear range=(array height 0))
        as |xScale yScale|
      }}
        {{#if (and xScale.isValid yScale.isValid)}}
          <Lineal::Axis
            @scale={{yScale}}
            @orientation='left'
            @tickValues={{array 20000000 100000000 200000000 280000000}}
          />
          <Lineal::Axis
            @scale={{xScale}}
            @orientation='bottom'
            transform='translate(0,{{height}})'
          />
          <Lineal::Gridlines
            @scale={{yScale}}
            @lineValues={{array 20000000 100000000 200000000 280000000}}
            @direction='horizontal'
            @length={{width}}
            stroke-dasharray='5 5'
            opacity='0.7'
          />
          <Lineal::Gridlines
            @scale={{xScale}}
            @direction='vertical'
            @length={{height}}
            stroke-dasharray='5 5'
            opacity='0.3'
          />
          {{#each this.population as |d|}}
            <circle
              cx={{xScale.compute d.year}}
              cy={{yScale.compute d.people}}
              r='3'
            ></circle>
          {{/each}}
        {{/if}}
        <Lineal::Line
          @data={{this.population}}
          @xScale={{xScale}}
          @yScale={{yScale}}
          @x='year'
          @y='people'
          @curve='natural'
          fill='transparent'
          stroke='black'
          stroke-width='2'
        />
        <rect
          x='0'
          y='0'
          width={{width}}
          height={{height}}
          tabindex='0'
          fill='transparent'
          class='interactor'
          {{interactor-cartesian-horizontal
            data=this.population
            xScale=xScale
            x='year'
            y='people'
            onSeek=this.updateActiveData
          }}
        ></rect>
        {{#if (and xScale.isValid yScale.isValid)}}
          {{#if this.activeDatum}}
            <g class='interaction-overlay'>
              <line
                stroke='pink'
                stroke-width='2'
                x1={{xScale.compute this.activeDatum.year}}
                x2={{xScale.compute this.activeDatum.year}}
                y1='0'
                y2={{height}}
              ></line>
              <circle
                cx={{xScale.compute this.activeDatum.year}}
                cy={{yScale.compute this.activeDatum.people}}
                r='5'
                fill='red'
              ></circle>
            </g>
          {{/if}}
        {{/if}}
      {{/let}}
    </svg>
  </Lineal::Fluid>
  <div>
    {{#if this.activeDatum}}
      <p><strong>Active Datum:</strong>
        {{this.activeDatum.year}}</p>
      <p><strong>Active Value:</strong>
        {{this.activeDatum.people}}</p>
    {{/if}}
  </div>
</div>

<p>Line</p>
<svg width='800' height='200'>
  {{#let
    (scale-linear range='15..785')
    (scale-linear range='190..10')
    as |xScale yScale|
  }}
    <Lineal::Area
      @data={{this.sineFiltered}}
      @xScale={{xScale}}
      @yScale={{yScale}}
      @x='x'
      @y='y'
      @y0={{0}}
      fill='rgba(255,0,0,0.3)'
      stroke-width='1'
    />
    <Lineal::Line
      @data={{this.sine}}
      @xScale={{xScale}}
      @yScale={{yScale}}
      @x='x'
      @y='y'
      fill='transparent'
      stroke='black'
      stroke-width='2'
    />
    <Lineal::Line
      @data={{this.sineFiltered}}
      @xScale={{xScale}}
      @yScale={{yScale}}
      @x='x'
      @y='y'
      stroke-dasharray='3 5'
      fill='transparent'
      stroke='black'
      stroke-width='1'
    />
    {{#if (and xScale.isValid yScale.isValid)}}
      {{#each this.sineFiltered as |d|}}
        <circle
          cx={{xScale.compute d.x}}
          cy={{yScale.compute d.y}}
          r='3'
        ></circle>
      {{/each}}
    {{/if}}
  {{/let}}
</svg>

<p>Area</p>
<svg width='800' height='200'>
  {{#let
    (scale-linear range='15..785' domain='0..10')
    (scale-linear range='190..10' domain='0..10')
    as |xScale yScale|
  }}
    <Lineal::Area
      @data={{array (hash x=0 y=5 y0=3) (hash x=10 y=10 y0=0)}}
      @xScale={{xScale}}
      @yScale={{yScale}}
      @x='x'
      @y='y'
      @y0='y0'
      fill='#BADA55'
      stroke='black'
    />
  {{/let}}
</svg>

<p>Arcs</p>
<svg width='800' height='200'>
  <g transform='translate(400 100)'>
    <Lineal::Arc
      @startAngle='90d'
      @endAngle='270d'
      @innerRadius={{50}}
      @outerRadius={{75}}
      fill='pink'
    />
  </g>
</svg>

<p>Pie</p>
<svg width='400' height='400'>
  <g transform='translate(200 200)'>
    <Lineal::Arcs
      @data={{array (hash v=1) (hash v=10) (hash v=4)}}
      @theta='v'
      @colorScale='reds'
      @outerRadius={{150}}
      @innerRadius={{100}}
      @padAngle='1d'
    />
  </g>
</svg>

<p>Pie 2</p>
<svg width='400' height='400'>
  <g transform='translate(200 200)'>
    <Lineal::Arcs
      @data={{array
        (hash v=1 c='red')
        (hash v=0 c='blue')
        (hash v=10 c='red')
        (hash v=4 c='fish')
      }}
      @theta='v'
      @startAngle='270d'
      @endAngle='450d'
      @color='c'
      @colorScale='reds'
      as |pie|
    >
      {{#each pie as |slice|}}
        <Lineal::Arc
          @startAngle={{slice.startAngle}}
          @endAngle={{slice.endAngle}}
          @outerRadius={{150}}
          @innerRadius={{100}}
          stroke='white'
          stroke-width='2'
          opacity={{if
            this.activeDatum
            (if (eq slice.data this.activeDatum) 1 0.3)
            1
          }}
          class={{slice.cssClass}}
          {{on 'mouseover' (fn (mut this.activeDatum) slice.data)}}
          {{on 'click' (fn this.logValue slice)}}
          {{on 'mouseout' (fn (mut this.activeDatum) null)}}
        />
      {{/each}}
    </Lineal::Arcs>
  </g>
</svg>

{{outlet}}